@startuml

class Legend{
  1-X: GenerateTournament-Step
  2-x: ReportMatchResult-Step
  3-x: RemoveTeamfromLeague-Step
  }

class HttpRequest{
  body:string
  params:{}
  }

class Actor {
  }


class HttpResponse{
  body:string
  }

package Models {
  
  class League {
  League_Id:string
  Owner:User
  Name:string
  Description:string
  Logo:byte_array
  Game_type:String
  
  +valid(League):boolean
}

class Tournament {
  Tournament_Id:string
  Nam:string
  Description:string
  Generated:boolean
  +valid(Tournament):boolean
}

class Team {
  Team_Id:string
  Roster:[User]
  Wins:int
  Losses:int
  Ties:int
  Rating:float
  Owner:User
  Name:string
  Description:string
  Logo:byte_array
  +valid():boolean
  }
  
  class Match {
    Match_Id:string
    Match_Title:string
    Home_Team:Team
    Away_Team:Team
    Victor:Team
    Loser:Team
    Victor_Score:float
    Loser_Score:float
    Confirmed:boolean
    in_Conflict:boolean
    
    +valid(Match):boolean
  }
  
  class User{
    User_Id:string
    DisplayName:string
    Email:string
    +valid(User):boolean
  }
}

package Controllers {
  class LeagueController {
    table:string
    +get(id,name):User
    +getAll():[User]
    +put(League):User
    +post(League):User
    +delete(id):string
    
  }
  class MatchController {
    table
    +get(id,Match_Title):Match
    +getAll():[Match]
    +put(Match):Match
    +post(Match):Match
    +delete(id):string
    +setMatchDetails(Match_Details):string
    +setMatchConflict(id,status):string
    +confirmMatch(id,team_id):string
  }
  class TournamentController {
    table:string
    +get(id,Name):Tournament
    +getAll():[Tournament]
    +put(Tournament):Tournament
    +post(Tournament):Tournament
    +delete(id):string

    
  }
  class TeamController {
    table:string
    +get(id):team
    +get(league_id,name):team
    +getAll():[Team]
    +put(Team):Team
    +post(Team):Team
    +delete(id):string
  }
  class UserController {
    table:string
    +get(id):User
    +get(displayName):User
    +getAll():[User]
    +put(User):User
    +post(User):User
    +delete(id):string
  }
  
}

package Db {
  
  class mongodb {
      MongoClient:MongoClient
      dbName:string
      connectionString:URI
    
      -_boolean_operation(table,args,function):boolean
      -_get_operation(table,args,function):{valid:boolean,data:object}
    +save(table,object):boolean
    +update(table,id,object):boolean
    +getById(table,id):object
    +getAll(table):[object]
    +deleteById(table,id):boolean
    +connect():void
    +close():void
    +getDb():Db
    }
  
  }

package Services {
  class TournamentService{
    sddfg
  }
  
  class MatchService{

  }
  
  
  class LeagueService{

  }
  
  
}

class Express{
  
}

class App{
  router:Express.Router
  +mountRoutes():void
}

HttpRequest -down-> App : Recive Request

Models <--> Db : CRUD Operation

App -right-> HttpResponse : Convert Object to JSON

App <-down-> Express : Pass Request/Response Path to Router

Express <-down-> Controllers : Route request to Contrroller

Controllers <--> Models : Validate Request Objects

Actor -left-> HttpRequest : Send Request

HttpResponse -up-> Actor : Recive Response

Controllers --> Services : Process Data Operation

Team }-[#purple]-{ Match
  
Team }-[#purple]-{ User
  
Team }-[#purple]-{ Tournament
  
Tournament -[#purple]-{ Match

League -[#purple]-{ Match
  
League -[#purple]-{ Tournament

TournamentService -[#green]-> Tournament : 1-1 Get Tournament Object
TournamentService -[#green]-> Team : 1-2 Get Team Objects
TournamentService -[#green]-> Match: 1-3 Create and Save Match Objects
TournamentService -[#green]-> Team : 1-4 Update Team Objects
TournamentService -[#green]-> Tournament : 1-5 Update Tournament

MatchService -[#blue]-> Match : 2-1 Get Match Object
MatchService -[#blue]-> Team : 2-2 Get both Team Object
MatchService -[#blue]up-> MatchService : 2-3 Check for Result Conflict if conflict abbort
MatchService -[#blue]-> Team : 2-4 Update both Team Objects
MatchService -[#blue]-> Match : 2-5 Update Mact Object

LeagueService -[#cyan]-> Team : 3-1 Get Team Object
LeagueService -[#cyan]-> League : 3-2 Get League Object
LeagueService -[#cyan]-> Match : 3-3 Get Team's League Match Objects
LeagueService -[#cyan]-> LeagueService : 3-4 Ensure Match objects are empty if not abort
LeagueService -[#cyan]-> League : 3-5 Update League Object
LeagueService -[#cyan]-> Team : 3-6 Update Team Object

Legend --|> Services



@enduml
